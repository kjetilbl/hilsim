<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="vesselnode_8cpp" kind="file" language="C++">
    <compoundname>vesselnode.cpp</compoundname>
    <includes refid="vesselnode_8h" local="yes">vesselnode.h</includes>
    <incdepgraph>
      <node id="205">
        <label>vesselnode.h</label>
        <link refid="vesselnode_8h_source"/>
        <childnode refid="206" relation="include">
        </childnode>
      </node>
      <node id="214">
        <label>solver.h</label>
        <link refid="solver_8h_source"/>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>src/vesselnode.cpp</label>
        <link refid="vesselnode.cpp"/>
        <childnode refid="205" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>tf/transform_broadcaster.h</label>
      </node>
      <node id="216">
        <label>cmath</label>
      </node>
      <node id="213">
        <label>nav_msgs/Odometry.h</label>
      </node>
      <node id="220">
        <label>gps.h</label>
        <link refid="gps_8h_source"/>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="208">
        <label>Eigen/Dense</label>
      </node>
      <node id="211">
        <label>geometry_msgs/PoseStamped.h</label>
      </node>
      <node id="212">
        <label>geometry_msgs/Twist.h</label>
      </node>
      <node id="219">
        <label>imu.h</label>
        <link refid="imu_8h_source"/>
        <childnode refid="215" relation="include">
        </childnode>
      </node>
      <node id="207">
        <label>ros/ros.h</label>
      </node>
      <node id="209">
        <label>math.h</label>
      </node>
      <node id="217">
        <label>simulator_prototype/Gps.h</label>
      </node>
      <node id="218">
        <label>mru.h</label>
        <link refid="mru_8h_source"/>
        <childnode refid="215" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>vessel.h</label>
        <link refid="vessel_8h_source"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
      </node>
      <node id="221">
        <label>speedsensor.h</label>
        <link refid="speedsensor_8h_source"/>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="215">
        <label>sensor.h</label>
        <link refid="sensor_8h_source"/>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;vesselnode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">VesselNode::VesselNode(){</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7"><highlight class="normal">VesselNode::~VesselNode(){</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VesselNode::step(){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>vessel.setThrust(tau_control);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>vessel.step();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>vessel.getState(eta,<sp/>nu);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>logInfo();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>publishState();</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VesselNode::getDT(){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vessel.getDT();</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VesselNode::publishState(){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>tf::Transform<sp/>transform;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>transform.setOrigin(tf::Vector3(eta[0],-eta[1],-eta[2]));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>tf::Quaternion<sp/>q;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>q.setRPY(-eta[3],-eta[4],-eta[5]);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>transform.setRotation(q);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>tf.sendTransform(tf::StampedTransform(transform,<sp/>ros::Time::now(),<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/>tf_name));</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VesselNode::receiveThrust(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist::ConstPtr&amp;<sp/>thrust_msg){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_control<sp/>&lt;&lt;<sp/>thrust_msg-&gt;linear.x,<sp/>thrust_msg-&gt;linear.y,<sp/>thrust_msg-&gt;linear.z,<sp/>thrust_msg-&gt;angular.x,<sp/>thrust_msg-&gt;angular.y,<sp/>thrust_msg-&gt;angular.z;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VesselNode::logInfo(){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>velocity;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>state;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>thrust;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.linear.x<sp/>=<sp/>nu(0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.linear.y<sp/>=<sp/>nu(1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.linear.z<sp/>=<sp/>nu(2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.angular.x<sp/>=<sp/>nu(3);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.angular.y<sp/>=<sp/>nu(4);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity.angular.z<sp/>=<sp/>nu(5);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>vel_pub.publish(velocity);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>state.linear.x<sp/>=<sp/>eta(0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>state.linear.y<sp/>=<sp/>eta(1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>state.linear.z<sp/>=<sp/>eta(2);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>state.angular.x<sp/>=<sp/>eta(3);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>state.angular.y<sp/>=<sp/>eta(4);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>state.angular.z<sp/>=<sp/>eta(5);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>state_pub.publish(state);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.linear.x<sp/>=<sp/>tau_control(0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.linear.y<sp/>=<sp/>tau_control(1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.linear.z<sp/>=<sp/>tau_control(2);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.angular.x<sp/>=<sp/>tau_control(3);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.angular.y<sp/>=<sp/>tau_control(4);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust.angular.z<sp/>=<sp/>tau_control(5);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>thrust_pub.publish(thrust);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/vesselnode.cpp"/>
  </compounddef>
</doxygen>
