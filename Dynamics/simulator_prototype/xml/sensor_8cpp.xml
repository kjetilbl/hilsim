<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="sensor_8cpp" kind="file" language="C++">
    <compoundname>sensor.cpp</compoundname>
    <includes refid="sensor_8h" local="yes">sensor.h</includes>
    <incdepgraph>
      <node id="148">
        <label>cmath</label>
      </node>
      <node id="146">
        <label>src/sensor.cpp</label>
        <link refid="sensor.cpp"/>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="149">
        <label>Eigen/Dense</label>
      </node>
      <node id="151">
        <label>geometry_msgs/Twist.h</label>
      </node>
      <node id="150">
        <label>ros/ros.h</label>
      </node>
      <node id="152">
        <label>simulator_prototype/Gps.h</label>
      </node>
      <node id="147">
        <label>sensor.h</label>
        <link refid="sensor_8h_source"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;sensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::publishData(Vector6d<sp/>imu_data)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>steps_per_data_output){</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>step=0;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>imuMessage;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.linear.x<sp/>=<sp/>imu_data(0);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.linear.y<sp/>=<sp/>imu_data(1);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.linear.z<sp/>=<sp/>imu_data(2);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.angular.x<sp/>=<sp/>imu_data(3);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.angular.y<sp/>=<sp/>imu_data(4);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>imuMessage.angular.z<sp/>=<sp/>imu_data(5);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>imu_pub.publish(imuMessage);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>step++;<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::publishData(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>steps_per_data_output){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>step=0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>speedSensorMessage;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>speedSensorMessage.linear.x<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>speedSensorMessage.linear.y<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>speed_sensor_pub.publish(speedSensorMessage);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>step++;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::publishData(Vector6d<sp/>gps_position,<sp/>Vector3d<sp/>gps_info)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>steps_per_data_output){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>step=0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>simulator_prototype::Gps<sp/>gpsMessage;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.header.stamp<sp/>=<sp/>ros::Time::now();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/gps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.latitude<sp/>=<sp/>gps_position(0)*(180/M_PI);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.longitude<sp/>=<sp/>gps_position(1)*(180/M_PI);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.altitude<sp/>=<sp/>gps_position(2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.track<sp/>=<sp/>gps_info(1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.speed<sp/>=<sp/>gps_info(0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.heading<sp/>=<sp/>gps_position(5);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>gpsMessage.headingRate<sp/>=<sp/>gps_info(2);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>gps_pub.publish(gpsMessage);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>step++;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::publishData(Vector6d<sp/>nu,<sp/>Vector6d<sp/>eta)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>steps_per_data_output){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>mruVelocityMessage;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist<sp/>mruPositionMessage;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.linear.x<sp/>=<sp/>eta(0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.linear.y<sp/>=<sp/>eta(1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.linear.z<sp/>=<sp/>eta(2);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.angular.x<sp/>=<sp/>eta(3);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.angular.y<sp/>=<sp/>eta(4);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>mruPositionMessage.angular.z<sp/>=<sp/>eta(5);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.linear.x<sp/>=<sp/>nu(0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.linear.y<sp/>=<sp/>nu(1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.linear.z<sp/>=<sp/>nu(2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.angular.x<sp/>=<sp/>nu(3);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.angular.y<sp/>=<sp/>nu(4);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>mruVelocityMessage.angular.z<sp/>=<sp/>nu(5);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>mru_position_pub.publish(mruPositionMessage);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>mru_velocity_pub.publish(mruVelocityMessage);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>step++;<sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::setFrequency(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_frequency){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>frequency<sp/>=<sp/>_frequency;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(frequency&gt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(1/dt)){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Illegal<sp/>combination<sp/>of<sp/>stepsize<sp/>and<sp/>sensor<sp/>output<sp/>frequency<sp/>found,<sp/>lowering<sp/>sensor<sp/>output<sp/>frequency.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_per_data_output<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>steps_per_data_output<sp/>=<sp/>int((1/dt)/frequency);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>step=1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sensor::setStepSize(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stepsize)<sp/>{<sp/>dt<sp/>=<sp/>stepsize;<sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/sensor.cpp"/>
  </compounddef>
</doxygen>
